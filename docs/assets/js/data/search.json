[
  
  {
    "title": "Multi-Factor-Authentication-(2FA)-Security-Testing",
    "url": "/posts/Multi-Factor-Authentication-(2FA)-Security-Testing/",
    "categories": "Multi-Factor-Authentication",
    "tags": "2FA, Web Penetration Testing",
    "date": "2023-08-17 00:00:00 +0300",
    





    
    "snippet": "IntroductionIn the name of Allah, most gracious and most mercifulGreetings, fellow security enthusiasts!Imagine a lock that requires not just one, but two secret keys to open. That’s Multi-Factor A...",
    "content": "IntroductionIn the name of Allah, most gracious and most mercifulGreetings, fellow security enthusiasts!Imagine a lock that requires not just one, but two secret keys to open. That’s Multi-Factor Authentication (2FA) in a nutshell – an extra layer of defense that’s become a game-changer in keeping digital front doors locked against cyber intruders.In this guide, we’re diving into the world of 2FA security. Think of it as a treasure map that leads us through uncharted territory, where we’ll uncover hidden vulnerabilities, test their strength, and equip ourselves with tools to ensure that 2FA is as solid as a fortress.Whether you’re a seasoned pentester or just starting out on your bug-hunting adventure, join us as we unravel the secrets of Multi-Factor Authentication, one factor at a time!1. 2FA Setup2FA Secret Cannot be Rotated [P4]The 2FA secret is a cryptographic key that is shared between the user and the application. It is used to generate time-based one-time passwords (TOTPs) for authentication. Rotating the secret means changing this key periodically to enhance security. If the 2FA secret cannot be rotated, it means that once the secret is compromised, an attacker could potentially gain ongoing access to the account without the user’s knowledge, as there is no way for the user to change the secret.Steps1. Login to the application 2. Setup two factor authentication3. After the 2FA secret is created, observe that there is no way in which the secret can be rotated  This is a security weakness because if an attacker gains access to the 2FA secret, they could potentially use it to generate valid authentication codes and bypass the 2FA protection.References  https://bugcrowd.com/disclosures/0c8a87aa-f10f-4174-b6d8-56c365062910/2fa-secret-is-not-rotated  https://zofixer.com/what-is-weak-2fa-implementation-2fa-secret-cannot-be-rotated-vulnerability/2FA Secret Remains Obtainable After 2FA is Enabled [P4]The scenario “2FA Secret Remains Obtainable After 2FA is Enabled” in the Bugcrowd VRT refers to a vulnerability where, even after setting up two-factor authentication (2FA) for an account, the 2FA secret or key remains accessible to unauthorized individuals. This is a serious security flaw because the 2FA secret is a critical component of the authentication process, and if it is obtainable by attackers, it significantly weakens the overall security of the account.StepsIf Target allows using 2FA authenticator like google authenticator or Microsoft authenticator etc... Try to Find a path that leaks QR code Or the secret that shows when enable the 2fa authenticationAnalyze JS Files and try to understand how the target generate the secret test if the 2FA secret is still retrievable even after the 2FA feature has been activated by Replay Attacks or somethingReferences  https://bugcrowd.com/vulnerability-rating-taxonomy  https://github.com/bugcrowd/vulnerability-rating-taxonomy/issues/2032FA Setup Logic Flaw [Varient]The “Flawed Authenticator Attachment in Web Application 2FA Setup” vulnerability exposes a critical flaw in the process of attaching an authenticator app for two-factor authentication (2FA) within a web application. This vulnerability allows an attacker to manipulate the verification step of attaching the authenticator, compromising the intended security benefits of the 2FA mechanism and leading to potential account compromise/damadge as there is no real authenticator attached to the account.Steps1. Login and Initiate 2FA Setup: Log in to the web application using valid credentials. Navigate to the section for setting up 2FA in your account settings.2. Start Authenticator Attachment: Begin the process of attaching an authenticator app for 2FA.3. Provide Incorrect 2FA Code and Capture the Request: Enter an incorrect 2FA code from the authenticator app. Capture the request made by the application.4. Intercept the Response and Manipulate it to a Successful Response: Intercept the response sent by the application and modify it to indicate a successful verification, even though the provided 2FA code was incorrect.Impact: User can't login anymoreOld session does not expire after setup 2FA [P4]Old sessions persist after enabling 2FA, letting attackers access accounts even with 2FA. This undermines security and could lead to unauthorized actions. Developers must invalidate old sessions upon 2FA activation for robust protection.Steps1. Login to the application in two different browsers and enable 2FA from 1st session.2. Use 2nd session and if it is not expired, it could be an issue if there is an insufficient session expiration issue.3. In this scenario if an attacker hijacks an active session before 2FA, it is possible to carry out all functions without a need for 2FAReferences  https://bugcrowd.com/disclosures/4147cfbb-a808-4504-9b4f-2a8b68e17d62/old-session-does-not-expire-after-setup-2faEnable 2FA without verifying the email [ P3 ]Steps1. The attacker signs up with victim's email (Email verification will be sent to victim's email). 2. Attacker is able to log in without verifying the email. 3. Attacker adds 2FA. 4. the victim can't register an account with victim email. If the victim reset the password, the password will change, but the victim can't login because 2FA.References  https://hackerone.com/reports/649533IDOR Leads To ATO [ P2, P3 ]Steps1. As a user1, register, skip 2FA, copy the ID.2. Register an account user2, register, perform a 2FA request but with ID from user1.3. 2FA is enabled now on the account user1!4. Perform a request /api/2fa/verify with valid code and ID of user1.References  https://hackerone.com/reports/8108802. 2FA Bypass2FA Code is Not Updated After New Code is Requested [ P5 ]Using sms, requesting multiple 2FA codes (without using them) results in the same code being sentSteps1. Try Login to your account 2. In 2FA Request resend the code 3. If the old and new code is the same then there is an issue Impact: code that is not updated after a request new one makes it easier for a hacker to brute force or guess the codeResources  https://github.com/bugcrowd/vulnerability-rating-taxonomy/issues/289Old 2FA Code is Not Invalidated After New Code is Generated [ P5, P4 ]  A new 2FA code is generated for the user.  The old 2FA code from a previous generation is not immediately marked as invalid or revoked.  An attacker could potentially use the old 2FA code, even though a new one has been generated.Steps1. Try Login to your account 2. in 2fa page request a new code 3. Enter the Old code ---------1. Request a 2FA code and use it 2. Now, Re-use the 2FA code and if it is used successfully that's an issue.3. Also, try to re-use the previously used code after long time duration say 1 day or more. That will be an potential issue as 1 day is enough duration to crack and guess a 6-digit 2FA code.-------------------1. authenticator generate code every 30 sec2. wait 30 sec then use the code -----------------------------------------------------------------1. Remove authenticator from your account and generate New 2FA secret and attach it with authenticator 2. Use codes generated by old 2fa secret with authenticatorReferences  https://github.com/bugcrowd/vulnerability-rating-taxonomy/issues/289  https://hackerone.com/reports/695041  https://gitlab.com/gitlab-org/gitlab/-/issues/1216662FA Code Leakage in Response [ P3 ]Steps1. At 2FA Code Triggering Request, such as Send OTP functionality, capture the Request.2. See the Response to this request and analyze if the 2FA Code is leaked in the response somewhere.References  https://hackerone.com/reports/1276373Lack of Brute-Force Protection [ P4 ]This involves all sort of issues which comes under security misconfiguration such as lack of rate limit, no brute-force protection, etc.Steps1. Request 2FA code and capture this request.2. Repeat this request for 100-200 times and if there is no limitation set, that's a rate limit issue.3. At 2FA Code Verification page, try to brute-force for valid 2FA and see if there is any success.4. You can also try to initiate, requesting OTPs at one side and brute-forcing at another side. Somewhere the OTP will match in middle and may give you a quick result5. try bypass rate limit protection by changing the subdomain in host header-----------1. go to the 2FA page2. Click on the \"Resend code\" Button3. Capture this request 4. Resend it 50 timesImpact: You won't be able to bypass the 2FA but you will be able to waste the company's money.----------# no rate limit after reset password 1. A user sends a password reset message to user's registered email.2. Go to \"Password Reset\" page from #1's message.3. Set a new password and Brute force two-factor auth codeReferences  https://hackerone.com/reports/1060518  https://hackerone.com/reports/121696Missing 2FA Code Integrity Validation [ P3 ]Steps1. Request a 2FA code from Attacker Account.2. Use this valid 2FA code in the victim 2FA Request and see if it bypasses the 2FA Protection. 1. Check if you can get the token from your account and try to use it to bypass the 2FA in a different account.Bypass 2FA with null or 000000 or Blanc  [ P3 ]Steps1. log in to your account2. Enable 2FA3. Logout4. Login again and notice OTP is asked5. Now using the Burp suite intercept the POST request by   sending the incorrect code. [Do not forward]6. Before forwarding the request to the server, remove the code and forward | OR Enter the code 000000 or null to bypass 2FA protection.7. Turnoff Intercept and notice that your login request has been fulfilledReferences  https://hackerone.com/reports/897385  https://hackerone.com/reports/8973852FA Referrer Check Bypass | Direct Request [ P2, P3 ]Steps1. Directly Navigate to the page which comes after 2FA or any other authenticated page of the application. 2. See if this bypasses the 2FA restrictions. 3. try to change the Referrer header as if you came from the 2FA page.Misconfiguration of Session permissions [ P4, P3 ]Steps1. Using the same session start the flow using your account and the victim's account.2. When reaching the 2FA point on both accounts.3. complete the 2FA with your account but do not access the next part.4. Instead of that, try to access the next step with the victim's account flow.5. If the back-end only set a Boolean inside your sessions saying that you have successfully passed the 2FA you will be able to bypass the 2FA of the victim.Lack of rate limit in the user’s account when logged in [ P4 ]StepsSometimes you can configure the 2FA for some actions inside your account (change mail, password...). However, even in cases where there is a rate limit when you tried to log in, there isn't any rate limit to protect actions inside the account.Changing the 2FA mode Leads to Bypass the code [ P3 ]Steps1. Use burp suite or another tool to intercept the requests 2. Turn on and configure your MFA3. Login with your email and password 4. The page of MFA is going to appear5. Enter any random number 6. when you press the button \"sign in securely\" intercept the request POST auth.target.com/v3/api/login and in the POST message change the fields: \"mode\":\"sms\" by \"mode\":\"email\" \"secureLogin\":true by \"secureLogin\":falsesend the modification and check, you are in your account! It was not necessary to enter the phone code. References  https://hackerone.com/reports/665722Bypass Using OAUTH [ P5 ]StepsSite.com requests Facebook for OAuth token &gt; Facebook verifies user account &gt; Facebook sends callback code &gt; Site.com logs a user in without requesting 2fa codeReferences  https://hackerone.com/reports/178293Random timeout issue on a Two-Step Verification endpoint [ P3 ]Stepsenter 2 wrong attempts in a short time  this may leads to bypass the 2FA processReferenceshttps://hackerone.com/reports/17479783. Disable 2FALack of Brute-Force Protection Disable 2FA [ P4 ]Steps(1) Login in your target(2) Click on your username (3) Navigate to Two-factor authentication --&gt; Disable 2FA (4) add random password in Please confirm your identity to register a new Two-Factor Authenticator (5) Capture the request and send it to Intruder for fuzz References  https://hackerone.com/reports/1465277Disable 2FA via CSRF (Leads to 2FA Bypass) [ P4 ]Steps1. Go to https://pandao.ru/profile/settings and sign up for two accounts. In which first is attacker's account and second is Victim’s 2. Log in to the Attackers account and capture the Disable 2FA request in the Burp suite and generate CSRF POC.3. Save the CSRF POC file with extension .html 4. Now log in to Victim’s account in Private Browser and fire that CSRF file. Now you can see that It disables 2FA which leads to 2FA Bypass -------------------1. Capture request in burpsuite2. Engagement tools&gt; Generate CSRF POC 3. Pass null chars in token value so function will over-ride4. Submit twice for overriding5. 2FA disabledJust add this for extra&lt;!-- Reload page every 5 seconds. --&gt; &lt;body onload=\"timer = setTimeout('auto_reload()',5000);\"&gt;&lt;/body&gt;&lt;/html&gt;References  https://vbharad.medium.com/2-fa-bypass-via-csrf-attack-8f2f6a6e3871  https://hackerone.com/reports/670329  https://twitter.com/adityashende17/status/1241093166540849152Password Reset/Email Check → Disable 2FA [ P5,P4 ]Steps* Create an Account and Turn On 2FA. * Logout from that account. * Now, Go to Forget Password-Reset page. * Change your password. * Now try to log in, If you are not asked to enter a 2FA code, You can report.References  https://infosecwriteups.com/how-i-bypass-2fa-while-resetting-password-3f73bf665728Logic Bug Disable 2FA [ P3 ]Steps1. Open Your BurpSuite and Turn on the intercept 2. Go To 2Factor Authentication page click the red buttons \"Disable two factor ....\" 3. Put any wrong password and copy all the header 4. Go to repeater and make a POST request to https://localizestaging.com/api/user/two-factor/set also Paste the header here.5. add a body request like this method=sms&amp;phone=%2B62-hacker-phone-number then click GO 6. Bypassed !References  https://hackerone.com/reports/783258Backup Code Abuse [ Varient ]StepsApply same techniques used on 2FA such as Response/Status Code Manipulation, Brute-force, etc. to bypass Backup Codes and disable/reset 2FABackup codes are generated immediately after 2FA is enabled and are available on a single request. After each subsequent call to the request, the codes can be regenerated or remain unchanged (static codes). If there are CORS misconfigurations/XSS vulnerabilities and other bugs that allow you to “pull” backup codes from the response request of the backup code endpoint, then the attacker could steal the codes and bypass 2FA if the username and password are known.References  https://hackerone.com/reports/113953  https://hackerone.com/reports/100509Password not checked when 2FA Disable [ P5, P4 ]Steps1. Check when u try to disable 2FA there is no identity confirmation methods like 2fa code otr password -------------------------------------1. go to your account and activate the 2FA from /settings/auth2. after activating this option click on the Disable icon beside Two-factor authentication.3. a new window will open asking for Authentication or backup code - Password to confirm the disabled4. in the first box enter a valid Authentication or backup code and in the password filed enter any random/wrong password and click save.5. the option will be disabled successful without check the validation of the password.Resources  https://hackerone.com/reports/587910Clickjacking on 2FA Disabling Page [ P4 ]Steps1. Try to Iframe the page where the application allows a user to disable 2FA 2. If Iframe is successful, try to perform a social engineering attack to manipulate victim to fall in your trap.2FA Security Testing Mind-Map  https://github.com/h0tak88r/Mind_Maps/blob/main/2FA%20Security%20Testing.xmind    The End  With this, we conclude our exploration of 2FA security. Remember, the path of cybersecurity is never-ending. Until we meet again on our next endeavor, stay committed to safeguarding the digital realm. Farewell for now!"
  },
  
  {
    "title": "Deep-Subdomains-Enumeration-Methodology",
    "url": "/posts/Deep-Subdomains-Enumeration/",
    "categories": "Recon",
    "tags": "Recon, Subdomain_Enumeration",
    "date": "2023-06-05 00:00:00 +0300",
    





    
    "snippet": "What’s the need?  A good subdomain enumeration will help you find those hidden/untouched subdomains, resulting lesser people finding bugs on that particular domain. Hence, fewer duplicates.  Findin...",
    "content": "What’s the need?  A good subdomain enumeration will help you find those hidden/untouched subdomains, resulting lesser people finding bugs on that particular domain. Hence, fewer duplicates.  Finding applications running on hidden, forgotten (by the organization) sub-domains may lead to uncovering critical vulnerabilities.  For large organizations, to find what services they have exposed to the internet while performing an internal pentest.  The methodology of collecting subdomains from tools like amass, subfinder, findomain and directly sending them to httpx/httprobe is absolutely wrong. Instead, you should first DNS resolve them using tools like puredns or shuffledns.💡 There are many tools that you may think are better than the ones mentioned in some techniques, In this methodology I focus on the techniquess part You can go ahead and try your preferred ToolsFrom this image, you can get the idea of horizontal/vertical domain correlation:Horizontal Enumeration  These enumeration methods can go out of scope and backfire you. Do it with caution!Discovering the IP space  First We need to get the ASN from websites like https://bgp.he.net/ or you can use any other tool that gets the job done  ASN(Autonomous System Number) is a unique identifier for a set of IP-ranges an organizations owns. Very large organizations such as Apple, GitHub, Tesla have their own significant IP space.  find out the IP ranges that reside inside that ASN. For this, we will use a tool called whois. apt-get install whois whois -h whois.radb.net  -- '-i origin AS8983' | grep -Eo \"([0-9.]+){4}/[0-9]+\" | uniq -u &gt; ip_ranges.txtPTR records (Reverse DNS)Since we already know the IP space of an organization we can, we can reverse query the IP addresses and find the valid domainsDNS PTR records (pointer record) helps us to achieve this. We can query a PTR record of an IP address and find the associated hostname/domain name.      Chain the tools Mapcidr - Dnsx together in one liner     cat ip_anges.txt | mapcidr -silent | dnsx -ptr -resp-only -o ptr_recrds.txt        When an IP range is given to mapcidr through stdin(standard input), it performs expansion of the CIDR range, spitting out each IP address from the range onto a new line. Now when dnsx receives each IP address from stdin, it performs reverse DNS and checks for PTR record. If, found it gives us back the hostname/domain name.Favicon Search  What is a favicon?  The image/icon shown on the left-hand side of a tab is called as favicon.ico  View source of the website page  Search for favicon.ico  download it from the link you got from source code      Calculate the hash using python3     import hashlib     def calculate_favicon_hash(file_path):     with open(file_path, 'rb') as file:         favicon_data = file.read()         favicon_hash = hashlib.md5(favicon_data).hexdigest()     return favicon_hash     favicon_path = '/path/to/favicon.ico' favicon_hash = calculate_favicon_hash(favicon_path) print(favicon_hash)        Shodan Search http.favicon.hash:[Favicon hash here]  Hint: Generally the favicon hash of any spring boot application is 116323821. So we can use this shodan filter **http.favicon.hash:116323821, You can use different favicon hashes for different services.Automation ?Use https://github.com/devanshbatham/FavFreakcat urls.txt | python3 favfreak.py -o outputhttp.favicon.hash:-&lt;hash&gt;Finding related domains/acquisitions  Ask CHATGPT  Search on Google ,wikibedia ro any other sources  Visit https://tools.whoisxmlapi.com/reverse-whois-searchVertical EnumerationPassive Enum  Here you have a lot of tools that do the job, but it is not about the tools; it is about the technique or the way you do it. You must use the tool with all of the APIs you can get.Personally I prefer subfinderSubfinder [ subfinder -d test.com -o passive2.txt -all ]Here is a list of free-api websites  censys  bevigil  binaryedge  cerspotter      whoisxmlapi    fofa  shodan  github  virustotal  zoomeye          There are in total around 90 passive DNS sources/services that provide such datasets to query them      You can use another tool that use free services and apis to do subdomain enumeration https://github.com/sl4x0/subfree      https://dnsdumpster.com/   → FREE domain research tool that can discover hosts related to a domain. Finding visible hosts from the attackers perspective is an important part of the security assessment process.      https://chaos.projectdiscovery.io/#/→  it is like database or something here u can get all subdomains for public bug bounty programs , Yeah it is useless when you work in a private ones      Another Ways (I don’t use )  Internet Archive → district → waybackurls  Github Scraping → github-subdomains  GitLab Scraping → gitlab-subdomainsRecursive Enumeration  In easy words, we again run tools like Amass, Subfinder, Assetfinder again each of the subdomains that were found.  If you have set up API keys, this technique may consume your entire querying quota  This technique is only useful when your target has a large number of multi-level subdomains(not effective for small &amp; medium scope targets).  It is a huge use of resources and power and takes time to return the final results so be careful and make this technique the last step of you process if you can :)))  Do it exclusively on a validated list of subdomains that you have collected through other Passive + Active techniques.Workflow:  Read the list of subdomains from the file “subdomains.txt”.  Process the subdomains in two steps: a)  Find the Top-10 most frequent occuring Second-Level Domain names with the help of tools like cut, sort, rev, uniq  b)  Find the Top-10 most frequent occuring Third-Level domains.  Now run passive subdomain enumeration on these 10 Second-level domain names and 10 Third-level domain names using tools like amass, subfinder, assetfinder, findomain.  Keep appending the results to passive_recursive.txt file.  Now after finding out the a list of domain names, run puredns to DNS resolve them and find the alive subdomainsAutomation#!/bin/bashgo install -v github.com/tomnomnom/anew@latestsubdomain_list=\"subdomains.txt\"for sub in $( ( cat $subdomain_list | rev | cut -d '.' -f 3,2,1 | rev | sort | uniq -c | sort -nr | grep -v '1 ' | head -n 10 &amp;&amp; cat subdomains.txt | rev | cut -d '.' -f 4,3,2,1 | rev | sort | uniq -c | sort -nr | grep -v '1 ' | head -n 10 ) | sed -e 's/^[[:space:]]*//' | cut -d ' ' -f 2);do     subfinder -d $sub -silent -max-time 2 | anew -q passive_recursive.txt    assetfinder --subs-only $sub | anew -q passive_recursive.txt    amass enum -timeout 2 -passive -d $sub | anew -q passive_recursive.txt    findomain --quiet -t $sub | anew -q passive_recursive.txtdoneActive EnumDNS Brute ForcingWhat is DNS bruteforcing?  We try to identify all possible subdomains using a very large word list.  By applying brute force to the domain or hostname, we get a very big list of subdomains that contains all possible subdomains from the wordlist + subdomain.  We pass this list to a tool that does DNS resolution and save the valid subdomains.Tool  Puredns outperforms the work of DNS bruteforcing &amp; resolving millions of domains at once. There exists various open-source tools, but puredns is the best in terms of speed &amp; accuracy of the results produced.Workflow  Sanitize the input wordlist  Mass resolve using the public resolvers  Wildcard detection      Validating results with trusted resolvers          The DNS resolution process uses “Trusted DNS resolvers” inorder to verify the results for the final time. This double resolution process helps in discarding those false-positive results. The main advantage of using Trusted DNS resolvers like Google DNS (8.8.8.8 , 8.8.4.4), Cloudflare(1.1.1.1) is to avoid DNS poisoned responses or other discrepancies that normal resolvers cause.      #Prerequisitesgit clone https://github.com/blechschmidt/massdns.gitcd massdnsmakesudo make install#Installing the toolgo install github.com/d3mondev/puredns/v2@latest# Download Resolvers Listwget https://raw.githubusercontent.com/trickest/resolvers/main/resolvers-trusted.txt# You even can make yoursgit clone https://github.com/vortexau/dnsvalidator.gitcd dnsvalidator/pip3 install -r requirements.txtpip3  install setuptools==58.2.0python3 setup.py installdnsvalidator -tL https://public-dns.info/nameservers.txt -threads 100 -o resolvers.txt# Download dns wordlist  wget https://wordlists-cdn.assetnote.io/data/manual/best-dns-wordlist.txt # Brute Forcingpuredns bruteforce best-dns-wordlist.txt example.com -r resolvers.txt -w dns_bf.txtPermutationsWorkflow:  First, we need to make a combined list of all the subdomains(valid/invalid) we collected from all the above steps whose permutations we will create.  To generate combinations you need to provide a small wordlist that contains common domain names like admin, demo, backup, api, ftp, email, etc.  This is a good wordlist of 1K permutation words that we will need.  generate various combinations or permutations of a root domain  DNS resolve them and check if we get any valid subdomains# Permutation words Wordlistwget https://gist.githubusercontent.com/six2dez/ffc2b14d283e8f8eff6ac83e20a3c4b4/raw# Run gotator -sub subdomains.txt -perm dns_permutations_list.txt -depth 1 -numbers 10 -mindup -adv -md | sort -u &gt; perms.txt# DNS resolve them and check for valid ones.puredns resolve permutations.txt -r resolvers.txt &gt; resolved_perms# Hint: Collect subdomains that is not valid and make compinations then resolve them u may git valid unique subdomains that is hard to find gotator -sub not_vali_subs.txt -perm dns_permutations_list.txt -depth 1 -numbers 10 -mindup -adv -md | sort -u &gt; perms.txtGoogle analyticsWe can perform a reverse search and find all the subdomains having the same Google Analytic ID. Hence, it helps us find acquisitions and unique domains.  Most organizations use Google Analytics to track website visitors and for more statistics. Generally, they have the same Google Analytics ID across all subdomains of a root domain git clone https://github.com/Josue87/AnalyticsRelationships.git cd AnalyticsRelationships/Python sudo pip3 install -r requirements.txt python3 analyticsrelationships.py -u https://www.example.com  TLS, CSP, CNAME Probing  In order to use HTTPS, the website owner needs to issue an SSL(Secure Socket Layer) certificate.      CSP headers sometimes contain domains/subdomains from where the content is usually imported      go install github.com/glebarez/cero@latest  #tls  cero in.search.yahoo.com | sed 's/^*.//' | grep -e \"\\.\" | sort -u  #cls  cat subdomains.txt | httpx -csp-probe -status-code -retries 2 -no-color | anew csp_probed.txt | cut -d ' ' -f1 | unfurl -u domains | anew -q csp_subdomains.txt  # cname  dnsx -retry 3 -cname -l subdomains.txt        Scraping(JS/Source code)  Workflow      Web probing subdomains     cat subdomains.txt | httpx -random-agent -retries 2 -no-color -o probed_tmp_scrap.txt            Now, that we have web probed URLs, we can send them for crawling to gospider     gospider -S probed_tmp_scrap.txt --js -t 50 -d 3 --sitemap --robots -w -r &gt; gospider.txt            Cleaning the output     sed -i '/^.\\{2048\\}./d' gospider.txt or  cat gospider.txt | grep -Eo 'https?://[^ ]+' | sed 's/]$//' | unfurl -u domains | grep \".example.com$\" | sort -u scrap_subs.txt            Resolving our target subdomains     puredns resolve scrap_subs.txt -w scrap_subs_resolved.txt -r resolvers.txt      Finish Workcd subs/cat horizontal/ptr_records.txt | sort -u &gt; horizontal.txtcat Vertical/Active/* | sort -u &gt; active.txtcat Vertical/Pssive/* | sort -u &gt; passive.txtcat * | sort -u &gt; all_subs.txtcat all_subs.txt | httpx -random-agent -retries 2 -no-color -o filtered_subs.txt"
  }
  
]

